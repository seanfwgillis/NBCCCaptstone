@model IEnumerable<Model.Purchase>

@{
    ViewBag.Title = "Index";
}

<div class="display-4 text-center">Purchase Orders</div>
<hr />
@{
    var fromDate = (DateTime)ViewBag.fromDate;
    var toDate = (DateTime)ViewBag.toDate;
}
@using (Html.BeginForm("Index", "PurchaseOrder", FormMethod.Get))
{
    <p class="text-center">
        <b>Search By:</b> @Html.RadioButton("searchBy", "Id", true) ID
        @Html.RadioButton("searchBy", "Date") Date <br />
        @Html.TextBox("search", null, new { @placeholder = "Enter ID" }) <input type="submit" value="Search" />
        <div>
            From Date: @Html.TextBox("fromDate", string.Format("{0:dd MMM yyy}", fromDate), new { @class = "datefield", type = "date" })
            To Date: @Html.TextBox("toDate", string.Format("{0:dd MMM yyy}", fromDate), new { @class = "datefield", type = "date" })
            <input type="submit" value="Search" />
        </div>
    </p>
}
@if (Model.Count() != 0 && Model.Where(n => n.SingleError == "Blank").Count() == 0 &&
    Model.Where(n => n.SingleError == "None").Count() == 0 && Model.Where(n => n.SingleError == "Format").Count() == 0)
{
    <div class="container-fluid">
        <table class="table table-bordered table-striped table-responsive">
            <thead class="thead-dark text-center" style="overflow: hidden; white-space: nowrap;">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.PONumber)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.EmployeeId)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Supervisor)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ApprovalStatus)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.CreationDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Subtotal)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Tax)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GrandTotal)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ModificationDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ModificationReason)
                    </th>

                </tr>
            </thead>

            @foreach (var item in Model)
            {
                <tbody class="text-center">
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.PONumber)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.EmployeeId)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Supervisor)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ApprovalStatus)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CreationDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Subtotal)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Tax)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.GrandTotal)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ModificationDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ModificationReason)
                        </td>
                        <td>
                            @Html.ActionLink("Edit Purchase Order Items", "Edit", "Item", new { id = item.PONumber }, new { @class = "text-center" })
                        </td>
                    </tr>
                </tbody>
            }

        </table>
    </div>
}
@if (Model.Count() != 0 && Model.Where(n => n.SingleError == "Blank").Count() > 0)
{
    <p class="text-center text-danger">Field cannot be left blank</p>
}
@if (Model.Count() != 0 && Model.Where(n => n.SingleError == "None").Count() > 0)
{
    <p class="text-center text-danger">No Purchase Orders meet the provided search parameters</p>
}
